

IF OBJECT_ID ('dbo.PROC_DML_COMMON_COLUMNS') IS NOT NULL
 	    DROP PROCEDURE dbo.PROC_DML_COMMON_COLUMNS
GO

CREATE PROCEDURE dbo.PROC_DML_COMMON_COLUMNS (@TGT_TABLE as NVARCHAR(2000),  
@SRC_TABLE as NVARCHAR(2000))  
as
BEGIN  
--DECLARE   
-- SQLINES DEMO *** 2(200);  
-- SQLINES DEMO *** 2(200);  
DECLARE @vQueryCommonCols NVARCHAR(max);  
DECLARE @vCommonCols NVARCHAR(max);  
DECLARE @vQueryInsert NVARCHAR(max);  
--DECLARE @TGT_TABLE VARCHAR(100) = 'LNL_TEMP_ACCESSLVL';  
--DECLARE @SRC_TABLE VARCHAR(100) = 'LNL_ACCESSLVL';  
SET NOCOUNT ON;     -- SQLINES DEMO *** TEMP_DEPT';   
    -- SQLINES DEMO *** DEPT';       
     SET @vCommonCols=(SELECT STRING_AGG(A.COLUMN_NAME,',') COLUMN_STRING FROM   
    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = (SELECT @TGT_TABLE)  
    intersect  
    SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = (SELECT @SRC_TABLE) ) A)       
    --PRINT @vQueryCommonCols;       
    --EXECUTE @vCommonCols = sp_executesql  @vQueryCommonCols ;     PRINT @vCommonCols;  
    SET @vQueryInsert = 'INSERT INTO '+ISNULL(@TGT_TABLE, '')+'('+ISNULL(@vCommonCols, '')+')  
                     SELECT '+ISNULL(@vCommonCols, '')+' FROM '+ISNULL(@SRC_TABLE, '')+'' ;  
    PRINT @vQueryInsert;  
    EXECUTE  sp_executesql  @vQueryInsert ;  
    --commit;  
END 
GO


DELETE FROM APPLICATIONS WHERE NAME ='ML_ACCESSUSAGE_SYNC_MODULE'
GO

INSERT INTO dbo.APPLICATIONS
(VFUUID, APPID, NAME, [TYPE], DESCRIPTION, ISACTIVE, INFO1, INFO2, INFO3, INFO4, COMPAREWITHDIGITALTWIN, UPDATETOVECTORFLOWTABLE, WRITETOOUTTOPIC, EXECUTERULES, RULESLOCATION, RULESCATEGORY, CREATEDBY, CREATEDON, MODIFIEDBY, MODIFIEDON, OPERATIONNOTES, WORKFLOW, PARENTCONDITION, VFMESSAGEID, VFAPPLICATION, VFOPERATION, VFNOTES, ISENDPOINT)
VALUES(NEWID(),(SELECT MAX(APPID)+1 FROM  APPLICATIONS(NOLOCK)), N'ML_ACCESSUSAGE_SYNC_MODULE', N'Recommendation Engine', 'Sync last Badge Swipe Info Every 24 Hours', NULL, NULL, NULL, NULL, NULL, 1, 1, 0, 1, N'1', N'1', NULL, GETUTCDATE(), NULL, GETUTCDATE(), NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL);
GO

IF OBJECT_ID ('dbo.DOORS') IS NOT NULL
    --SELECT * INTO DOORS_BCKUP FROM DOORS(NOLOCK) 
	DROP TABLE dbo.DOORS
GO

CREATE TABLE [dbo].[DOORS](
	[VFUUID] [uniqueidentifier] NOT NULL,
	[DOORID] [numeric](10, 0) NULL,
	[SLOTINDEX] [int] NULL,
	[ISALARMED] [bit] NULL,
	[UNLOCKDOORONRTE] [bit] NULL,
	[SHUNTDSMONRTE] [bit] NULL,
	[COUNTINOUSLYACTIVE] [bit] NULL,
	[SHUNTCANCELDISABLE] [bit] NULL,
	[RELOCKEXPIRATION] [bit] NULL,
	[RELOCKAFTEROPEN] [bit] NULL,
	[DELAYRELOCKTIME] [int] NULL,
	[UNLOCKTIME] [int] NULL,
	[SHUNTTIME] [int] NULL,
	[INDIRECTIONALLINKTIME] [int] NULL,
	[OUTDIRECTIONALLINKTIME] [int] NULL,
	[ALTERNATESHUNTTIME] [int] NULL,
	[SHUNTEXPRELAYTIME] [int] NULL,
	[UNLOCKGRACETIME] [int] NULL,
	[OPENGRACETIME] [int] NULL,
	[CLOSEDEBOUNCETIME] [int] NULL,
	[ALARMSTATESTATUS] [int] NULL,
	[OPENSTATESTATUS] [int] NULL,
	[MOMENTARYUNLOCKSTATUS] [int] NULL,
	[ADMITSTATUS] [int] NULL,
	[ALWAYSUSESHUNTEXPIRE] [bit] NULL,
	[ENTRANCEREADERSTATUS] [int] NULL,
	[EXITREADERSTATUS] [int] NULL,
	[REXSTATUS] [int] NULL,
	[DOUBLESWIPEPERMISSION] [int] NULL,
	[DOUBLESWIPEPRIORITY] [int] NULL,
	[INBOUNDINPUT] [int] NULL,
	[INBOUNDDURATION] [int] NULL,
	[OUTBOUNDINPUT] [int] NULL,
	[OUTBOUNDDURATION] [int] NULL,
	[INASSETREADER] [int] NULL,
	[OUTASSETREADER] [int] NULL,
	[ALTERNATEUNLOCKTIME] [int] NULL,
	[DOORINTRUSIONZONESTATUS] [int] NULL,
	[READERDISPLAYNAME] [nvarchar](20) NULL,
	[CLEARANCEFILTERSTATUS] [nvarchar](150) NULL,
	[DOOROPENALARMSTATUS] [int] NULL,
	[LOCKUNSECUREDSTATUS] [int] NULL,
	[LOCKTAMPERSTATUS] [int] NULL,
	[DSMTAMPERSTATUS] [int] NULL,
	[CRASHBARCHANGETIME] [int] NULL,
	[BONDSENSORCHANGETIME] [int] NULL,
	[LATCHBOLTCHANGETIME] [int] NULL,
	[CAMSENSORCHANGETIME] [int] NULL,
	[DSMSIDEACHANGETIME] [int] NULL,
	[DSMSIDEBCHANGETIME] [int] NULL,
	[RTECHANGETIME] [int] NULL,
	[CONDITIONAACCESSDELAY] [int] NULL,
	[CONDITIONALACCESSSTATUS] [int] NULL,
	[DUALAUTHENTICATION] [bit] NULL,
	[REJECTLIMITREACHEDSTATUS] [int] NULL,
	[ISEXPIRINGCLEARANCESUPPORTED] [int] NULL,
	[VFMESSAGEID] [uniqueidentifier] NULL,
	[VFNOTES] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](1000) NULL,
	[CLASSTYPE] [nvarchar](300) NULL,
	[PROTECTED] [bit] NULL,
	[PARTITIONID] [int] NULL,
	[INREADERID] [int] NULL,
	[OUTREADERID] [int] NULL,
	[BOARDID] [int] NULL,
	[BOARDCLASSTYPE] [nvarchar](300) NULL,
	[DOORSWITCHID] [int] NULL,
	[DOORLOCKID] [int] NULL,
	[RTEID] [int] NULL,
	[CONTROLLERID] [int] NULL,
	[SECONDARYRELAYID] [int] NULL,
	[CONTROLLERCLASSTYPE] [nvarchar](300) NULL,
	[SHUNTEXPIRATIONRELAYID] [int] NULL,
	[TEMPLATE] [bit] NULL,
	[SENDTOMONITORSTATION] [int] NULL,
	[MAINTENANCEMODE] [bit] NULL,
	[SENDTOJOURNAL] [bit] NULL,
	[DOORFORCEDALARMSENABLE] [int] NULL,
	[DOORHELDALARMSENABLE] [int] NULL,
	[RTEENABLE] [int] NULL,
	[LOCKTAMPERALARMSENABLE] [int] NULL,
	[DOOROPENTAMPERALARMSENABLE] [int] NULL,
	[DSMTAMPERALARMSENABLE] [int] NULL,
	[REPORTNONALARMS] [bit] NULL,
	[CONDITIONALACCESSSCHEDULEID] [int] NULL,
	[CONDITIONALACCESSREQUESTEVENTID] [int] NULL,
	[SECONDARYINREADERID] [int] NULL,
	[SECONDARYOUTREADERID] [int] NULL,
	[DOUBLESWIPEPERSONNELGROUP2ID] [int] NULL,
	[ENTRYAREAID] [int] NULL,
	[EXITAREAID] [int] NULL,
	[LOCKUNSECUREDALARMSENABLE] [int] NULL,
	[CONTROLLER] [varchar](3) NULL,
	[NAME] [nvarchar](200) NULL,
	[VFNODEID] [uniqueidentifier] NULL,
	[IGNORECHANGES] [bit] NULL,
	[PACSUUID] [uniqueidentifier] NULL,
	[VALIDFROM] [datetime2](7) NULL,
	[VALIDTO] [datetime2](7) NULL,
	[MAXOPTIMIZATIONREACHED] [int] NULL,
	[FORCESYNC] [numeric](1, 0) NULL,
	[STATUS] [nvarchar](50) NULL,
	[IS_ENABLE_OPTIMIZATION] [bit] NULL,
	[IS_ENABLE_MONITORING] [bit] NULL,
	[OPTIMIZATION_STARTDATE] [datetime] NULL,
	[MONITORING_STARTDATE] [datetime] NULL,
	[RESET_TODEFAULT] [bit] NULL,
	[RESET_DATE] [datetime] NULL,
	[CREATEDBY] [nvarchar](300) NULL,
	[MODIFIEDBY] [nvarchar](300) NULL,
	[INTERFACEUUID] [uniqueidentifier] NOT NULL,
	[CREATEDON] [datetime] NULL,
	[MODIFIEDON] [datetime] NULL
)
GO

IF OBJECT_ID ('dbo.STG_CCURE_DOORS') IS NOT NULL
	DROP TABLE dbo.STG_CCURE_DOORS
GO

CREATE TABLE [dbo].[STG_CCURE_DOORS](
	[index] [bigint] NULL,
	[ObjectID] [bigint] NULL,
	[Name] [varchar](max) NULL,
	[Description] [varchar](max) NULL,
	[GUID] [varchar](max) NULL,
	[ClassType] [varchar](max) NULL,
	[Protected] [bit] NULL,
	[PartitionID] [bigint] NULL,
	[LastModifiedTime] [datetime] NULL,
	[LastModifiedByID] [bigint] NULL,
	[InReaderID] [bigint] NULL,
	[OutReaderID] [bigint] NULL,
	[EntryAreaID] [varchar](max) NULL,
	[ExitAreaID] [varchar](max) NULL,
	[BoardID] [varchar](max) NULL,
	[BoardClassType] [varchar](max) NULL,
	[DoorSwitchID] [bigint] NULL,
	[DoorLockID] [bigint] NULL,
	[RTEID] [bigint] NULL,
	[SlotIndex] [varchar](max) NULL,
	[IsAlarmed] [varchar](max) NULL,
	[ControllerID] [bigint] NULL,
	[ControllerClassType] [varchar](max) NULL,
	[UnlockDoorOnRTE] [bit] NULL,
	[ShuntDSMOnRTE] [bit] NULL,
	[ContinuouslyActive] [bit] NULL,
	[ShuntCancelDisable] [bit] NULL,
	[RelockExpiration] [bit] NULL,
	[SecondaryRelayID] [bigint] NULL,
	[ShuntExpirationRelayID] [bigint] NULL,
	[Template] [bit] NULL,
	[RelockAfterOpen] [bit] NULL,
	[DelayRelockTime] [bigint] NULL,
	[UnlockTime] [bigint] NULL,
	[ShuntTime] [bigint] NULL,
	[InDirectionalLinkTime] [varchar](max) NULL,
	[OutDirectionalLinkTime] [bigint] NULL,
	[AlternateShuntTime] [bigint] NULL,
	[ShuntExpRelayTime] [bigint] NULL,
	[UnlockGraceTime] [bigint] NULL,
	[OpenGraceTime] [bigint] NULL,
	[CloseDebounceTime] [bigint] NULL,
	[ModeStatus] [bigint] NULL,
	[AlarmStateStatus] [bigint] NULL,
	[OpenStatus] [varchar](max) NULL,
	[MomentaryUnlockStatus] [bigint] NULL,
	[AdmitStatus] [bigint] NULL,
	[ParentID] [bigint] NULL,
	[ParentClassType] [varchar](max) NULL,
	[BondSensorID] [varchar](max) NULL,
	[AlwaysUseShuntExpire] [bit] NULL,
	[AdmitSessionID] [varchar](max) NULL,
	[ClusterID] [bigint] NULL,
	[EntranceReaderStatus] [varchar](max) NULL,
	[ExitReaderStatus] [varchar](max) NULL,
	[REXStatus] [varchar](max) NULL,
	[DoubleSwipePermission] [bigint] NULL,
	[DoubleSwipePriority] [bigint] NULL,
	[DoubleSwipeRelockScheduleID] [varchar](max) NULL,
	[DoubleSwipePersonnelGroupID] [varchar](max) NULL,
	[DoubleSwipeStatus] [bigint] NULL,
	[SendToMonitorStation] [bit] NULL,
	[SendToJournal] [bit] NULL,
	[InboundInput] [varchar](max) NULL,
	[InboundDuration] [varchar](max) NULL,
	[OutboundInput] [varchar](max) NULL,
	[OutboundDuration] [varchar](max) NULL,
	[InAssetReader] [varchar](max) NULL,
	[OutAssetReader] [varchar](max) NULL,
	[AlternateUnlockTime] [varchar](max) NULL,
	[DoorIntrusionZoneStatus] [bigint] NULL,
	[ReaderDisplayName] [varchar](max) NULL,
	[ClearanceFilterStatus] [varchar](max) NULL,
	[TimeZoneID] [bigint] NULL,
	[DoorOpenAlarmStatus] [bigint] NULL,
	[LockUnsecuredStatus] [bigint] NULL,
	[LockTamperStatus] [bigint] NULL,
	[DSMTamperStatus] [bigint] NULL,
	[CrashBarChangeTime] [bigint] NULL,
	[BondSensorChangeTime] [bigint] NULL,
	[LatchBoltChangeTime] [bigint] NULL,
	[CamSensorChangeTime] [bigint] NULL,
	[DSMSideAChangeTime] [bigint] NULL,
	[DSMSideBChangeTime] [bigint] NULL,
	[RTEChangeTime] [bigint] NULL,
	[DoorForcedAlarmsEnable] [bigint] NULL,
	[DoorHeldAlarmsEnable] [bigint] NULL,
	[RTEEnable] [bigint] NULL,
	[LockTamperAlarmsEnable] [bigint] NULL,
	[LockUnsecuredAlarmsEnable] [bigint] NULL,
	[DoorOpenTamperAlarmsEnable] [bigint] NULL,
	[DSMTamperAlarmsEnable] [bigint] NULL,
	[ReportNonAlarms] [bit] NULL,
	[MaintenanceMode] [bit] NULL,
	[ConditionalAccessScheduleID] [varchar](max) NULL,
	[ConditionalAccessDelay] [bigint] NULL,
	[ConditionalAccessStatus] [bigint] NULL,
	[ConditionalAccessRequestEventID] [varchar](max) NULL,
	[VisitorManagementEnable] [bigint] NULL,
	[SecondaryInReaderID] [bigint] NULL,
	[SecondaryOutReaderID] [bigint] NULL,
	[DualAuthentication] [bit] NULL,
	[DoubleSwipePersonnelGroup2ID] [varchar](max) NULL,
	[RejectLimitReachedStatus] [bigint] NULL,
	[IsExpiringClearanceSupported] [bit] NULL,
	[RequireManualActionInstructions] [bit] NULL
) 
GO


IF OBJECT_ID ('dbo.TEMP_BADGE_SWIPE_CCURE_DAILY') IS NOT NULL
	DROP TABLE dbo.TEMP_BADGE_SWIPE_CCURE_DAILY
GO

CREATE TABLE dbo.TEMP_BADGE_SWIPE_CCURE_DAILY
	(
	VFID            NUMERIC (10) IDENTITY NOT NULL,
	EXT_ID          NVARCHAR (255) NULL,
	TIMESTAMP       DATETIME NULL,
	Person_UID      NVARCHAR (255) NULL,
	PACSACCESSID    NVARCHAR (255) NULL,
	DOOR_EXT        NVARCHAR (255) NULL,
	SiteCodeID      NVARCHAR (255) NULL,
	CARDNUMBER      NVARCHAR (255) NULL,
	Systemid        NVARCHAR (255) NULL,
	VFCREATIONDT    DATETIME NULL,
	Direction       NVARCHAR (200) NULL,
	STATUS          NVARCHAR (200) NULL,
	TIMESTAMP_UTC   DATETIME NULL,
	NAME            NVARCHAR (100) NULL,
	PACSUUID        UNIQUEIDENTIFIER NULL,
	SERVERNAME      NVARCHAR (50) NULL,
	SERVERID        NVARCHAR (50) NULL,
	ALARMPOINT_GUID UNIQUEIDENTIFIER NULL,
	INTERFACEUUID   UNIQUEIDENTIFIER NULL
	)
GO


IF OBJECT_ID ('dbo.IDENTITY_AREAS_USAGE') IS NOT NULL
	DROP TABLE dbo.IDENTITY_AREAS_USAGE
GO

CREATE TABLE dbo.IDENTITY_AREAS_USAGE
	(
	VFUUID          UNIQUEIDENTIFIER DEFAULT (newsequentialid()) NOT NULL,
	VFID            NUMERIC (10) IDENTITY NOT NULL,
	IDENTITYAREAUID UNIQUEIDENTIFIER NOT NULL,
	LASTSWIPEDON    DATETIMEOFFSET NULL,
	CREATEDON       DATETIMEOFFSET NULL,
	CREATEDBY       NVARCHAR(300) NULL,
	MODIFIEDON      DATETIMEOFFSET NULL,
	MODIFIEDBY      UNIQUEIDENTIFIER NULL,
	VFNOTES         NVARCHAR (1024) NULL,
	IDENTITYUUID    UNIQUEIDENTIFIER NULL,
	AREAUUID        UNIQUEIDENTIFIER NULL,
	INTERFACEUUID   UNIQUEIDENTIFIER NULL
	PRIMARY KEY (VFUUID)
	)
GO

IF OBJECT_ID ('dbo.TEMP_LAST_BADGE_SWIPE_INFO') IS NOT NULL
	DROP TABLE dbo.TEMP_LAST_BADGE_SWIPE_INFO
GO

CREATE TABLE TEMP_LAST_BADGE_SWIPE_INFO (
	IDENTITY_GUID NVARCHAR(36),
	IDENTITYAREA_GUID NVARCHAR(36),
	INTERFACEUUID NVARCHAR(36),
	LAST_SWIPE_TIME DATE
)
GO


IF OBJECT_ID ('dbo.VFACCESSAREAS_DOOR') IS NOT NULL
	DROP TABLE dbo.VFACCESSAREAS_DOOR
GO

CREATE TABLE VFACCESSAREAS_DOOR (
	VFUUID NVARCHAR(200),
	VFID NUMERIC (10) IDENTITY NOT NULL,
	PACSACCESSID NVARCHAR(200),
	ACCESSAREAUUID NVARCHAR(100),
	DOORID NVARCHAR(100),
	ALARMPOINT_GUID NVARCHAR(1000),
	VFCREATIONDATE NVARCHAR(250)
)
GO

IF OBJECT_ID ('dbo.ACCESS_ACCESSAREA_DOORS') IS NOT NULL
	DROP TABLE dbo.ACCESS_ACCESSAREA_DOORS
GO

CREATE TABLE ACCESS_ACCESSAREA_DOORS
   (CLEARANCEID NUMERIC(19,0), 
	DOORID NUMERIC(19,0), 
	SCHEDULEID NUMERIC(19,0), 
	CLASSTYPE VARCHAR(1500)
   ) 
 GO

IF OBJECT_ID ('dbo.PROC_ML_PIAM_IDENTITYAREA_USAGE_SYNC') IS NOT NULL
		DROP PROCEDURE dbo.PROC_ML_PIAM_IDENTITYAREA_USAGE_SYNC
GO

CREATE  PROCEDURE  dbo.PROC_ML_PIAM_IDENTITYAREA_USAGE_SYNC @interfaceuuid as nvarchar(200)  
as   
BEGIN   

 
 INSERT INTO VFACCESSAREAS_DOOR(VFUUID,PACSACCESSID,ACCESSAREAUUID ,DOORID,ALARMPOINT_GUID,VFCREATIONDATE)
 SELECT newid(),B.PACSACCESSID ,B.ACCESSAREAUUID ,B.DOORID ,B.ALARMPOINT_GUID,GETUTCDATE() FROM 
 (SELECT DISTINCT A.PACSACCESSID ,A.VFUUID ACCESSAREAUUID ,D.DOORID ,d.pacsuuid ALARMPOINT_GUID FROM access_accessarea_doors(NOLOCK) AD
 JOIN DOORS(NOLOCK) D ON  CAST(AD.DOORID AS NVARCHAR(200)) = CAST(D.DOORID AS NVARCHAR(200))
 JOIN ACCESSAREAS(NOLOCK) A ON  cast(AD.CLEARANCEID as nvarchar(200))=cast(A.PACSACCESSID as nvarchar(200)) ) B 
 WHERE NOT EXISTS  (SELECT 1 FROM VFACCESSAREAS_DOOR(NOLOCK) A  
 WHERE A.ALARMPOINT_GUID=B.ALARMPOINT_GUID AND A.ACCESSAREAUUID=B.ACCESSAREAUUID)
 
 DROP TABLE IF EXISTS TEMP_LAST_BADGE_SWIPE_INFO  

 --declare @interfaceuuid  as nvarchar(200) = '794BC461-A4EE-4D77-BD0C-ADDD4AFEA7A6'

 DECLARE @map_column_identities nvarchar(200)=(SELECT TOP 1 ENTITYFIELDNAME FROM INTERFACEENTITYFIELDS(NOLOCK) WHERE VFINTERFACEENTITYUUID IN 
 (SELECT TOP 1  VFUUID FROM  INTERFACEENTITIES(NOLOCK) WHERE VFINTERFACEUUID =(select @interfaceuuid)
 AND ENTITYNAME = 'Identities')  AND ISIDENTIFIER = 1)

 print @map_column_identities

 /*SELECT I.VFUUID IDENTITY_GUID,IA.VFUUID IDENTITYAREA_GUID ,A.INTERFACEUUID,MAX(TIMESTAMP) LAST_SWIPE_TIME  
 INTO #TEMP_LAST_BADGE_SWIPE_INFO  
 FROM  TEMP_BADGE_SWIPE_CCURE_DAILY(NOLOCK) A   
 --JOIN IDENTITIES(NOLOCK) I ON  A.Person_UID=I.VFID  
 JOIN IDENTITIES(NOLOCK) I ON  A.Person_UID=I.USERNAME 
 JOIN IDENTITY_AREAS(NOLOCK) IA ON I.VFUUID=IA.IDENTITYUUID  
 GROUP BY I.VFUUID,IA.VFUUID,A.INTERFACEUUID*/
   
  
 DECLARE @query_get_lastswipeinfo nvarchar(max)='SELECT I.VFUUID IDENTITY_GUID,IA.VFUUID IDENTITYAREA_GUID ,A.INTERFACEUUID,MAX(TIMESTAMP) LAST_SWIPE_TIME  
 INTO TEMP_LAST_BADGE_SWIPE_INFO  
 FROM  TEMP_BADGE_SWIPE_CCURE_DAILY(NOLOCK) A   
 JOIN IDENTITIES(NOLOCK) I ON  CAST(A.Person_UID AS NVARCHAR(200))=CAST(I.'+@map_column_identities+' AS NVARCHAR(200))
 JOIN VFACCESSAREAS_DOOR(NOLOCK) VA  ON  CAST(A.ALARMPOINT_GUID AS NVARCHAR(200)) = CAST(VA.ALARMPOINT_GUID AS NVARCHAR(200))
 JOIN IDENTITY_AREAS(NOLOCK) IA ON I.VFUUID=IA.IDENTITYUUID   AND IA.PACSACCESSID = VA.PACSACCESSID
 GROUP BY I.VFUUID,IA.VFUUID ,A.INTERFACEUUID'  

 print(@query_get_lastswipeinfo)
 execute sp_executesql @query_get_lastswipeinfo
 
 INSERT INTO IDENTITY_AREAS_USAGE(VFUUID,IDENTITYUUID,IDENTITYAREAUID,LASTSWIPEDON,INTERFACEUUID,CREATEDON,CREATEDBY)  
 SELECT NEWID(),B.IDENTITY_GUID,B.IDENTITYAREA_GUID ,B.LAST_SWIPE_TIME,B.INTERFACEUUID,GETUTCDATE(),(SELECT TOP 1 VFUUID FROM APPLICATIONS(NOLOCK) 
 WHERE NAME ='ML_ACCESSUSAGE_SYNC_MODULE')
 FROM  TEMP_LAST_BADGE_SWIPE_INFO B  
 WHERE NOT EXISTS  (SELECT 1 FROM IDENTITY_AREAS_USAGE(NOLOCK) A  
 WHERE A.IDENTITYAREAUID=B.IDENTITYAREA_GUID AND A.IDENTITYUUID=B.IDENTITY_GUID)  
  
 UPDATE  IDENTITY_AREAS_USAGE   SET LASTSWIPEDON=B.LAST_SWIPE_TIME,INTERFACEUUID=B.INTERFACEUUID ,
 MODIFIEDON=GETUTCDATE(),MODIFIEDBY=(SELECT TOP 1 VFUUID FROM APPLICATIONS(NOLOCK) WHERE NAME ='ML_ACCESSUSAGE_SYNC_MODULE')
 FROM IDENTITY_AREAS_USAGE A   
  ,TEMP_LAST_BADGE_SWIPE_INFO B  
 WHERE A.IDENTITYAREAUID=B.IDENTITYAREA_GUID AND A.IDENTITYUUID=B.IDENTITY_GUID  
 
END   
GO


IF OBJECT_ID ('dbo.PROC_ML_PIAM_CCURE_DOOR_SYNC') IS NOT NULL
		DROP PROCEDURE dbo.PROC_ML_PIAM_CCURE_DOOR_SYNC
GO

CREATE  PROCEDURE  dbo.PROC_ML_PIAM_CCURE_DOOR_SYNC @interfaceuuid as nvarchar(200)  
as   
BEGIN   
  


 --declare @interfaceuuid  as nvarchar(200) = '794BC461-A4EE-4D77-BD0C-ADDD4AFEA7A6'

 UPDATE DOORS SET DOORID=B.OBJECTID,SLOTINDEX = B.SLOTINDEX,ISALARMED = B.ISALARMED,UNLOCKDOORONRTE = B.UNLOCKDOORONRTE,SHUNTDSMONRTE = B.SHUNTDSMONRTE,SHUNTCANCELDISABLE = B.SHUNTCANCELDISABLE,RELOCKEXPIRATION = B.RELOCKEXPIRATION,
 RELOCKAFTEROPEN = B.RELOCKAFTEROPEN,DELAYRELOCKTIME = B.DELAYRELOCKTIME,UNLOCKTIME = B.UNLOCKTIME,SHUNTTIME = B.SHUNTTIME,INDIRECTIONALLINKTIME = B.INDIRECTIONALLINKTIME,OUTDIRECTIONALLINKTIME = B.OUTDIRECTIONALLINKTIME,ALTERNATESHUNTTIME = B.ALTERNATESHUNTTIME,SHUNTEXPRELAYTIME = B.SHUNTEXPRELAYTIME,UNLOCKGRACETIME = B.UNLOCKGRACETIME,OPENGRACETIME = B.OPENGRACETIME,CLOSEDEBOUNCETIME = B.CLOSEDEBOUNCETIME,ALARMSTATESTATUS = B.ALARMSTATESTATUS,MOMENTARYUNLOCKSTATUS = B.MOMENTARYUNLOCKSTATUS,ADMITSTATUS = B.ADMITSTATUS,ALWAYSUSESHUNTEXPIRE = B.ALWAYSUSESHUNTEXPIRE,ENTRANCEREADERSTATUS = B.ENTRANCEREADERSTATUS,EXITREADERSTATUS = B.EXITREADERSTATUS,REXSTATUS = B.REXSTATUS,DOUBLESWIPEPERMISSION = B.DOUBLESWIPEPERMISSION,DOUBLESWIPEPRIORITY = B.DOUBLESWIPEPRIORITY,INBOUNDINPUT = B.INBOUNDINPUT,INBOUNDDURATION = B.INBOUNDDURATION,OUTBOUNDINPUT = B.OUTBOUNDINPUT,OUTBOUNDDURATION = B.OUTBOUNDDURATION,INASSETREADER = B.INASSETREADER,OUTASSETREADER = B.OUTASSETREADER,ALTERNATEUNLOCKTIME = B.ALTERNATEUNLOCKTIME,DOORINTRUSIONZONESTATUS = B.DOORINTRUSIONZONESTATUS,READERDISPLAYNAME = B.READERDISPLAYNAME,CLEARANCEFILTERSTATUS = B.CLEARANCEFILTERSTATUS,DOOROPENALARMSTATUS = B.DOOROPENALARMSTATUS,LOCKUNSECUREDSTATUS = B.LOCKUNSECUREDSTATUS,LOCKTAMPERSTATUS = B.LOCKTAMPERSTATUS,DSMTAMPERSTATUS = B.DSMTAMPERSTATUS,CRASHBARCHANGETIME = B.CRASHBARCHANGETIME,BONDSENSORCHANGETIME = B.BONDSENSORCHANGETIME,LATCHBOLTCHANGETIME = B.LATCHBOLTCHANGETIME,CAMSENSORCHANGETIME = B.CAMSENSORCHANGETIME,DSMSIDEACHANGETIME = B.DSMSIDEACHANGETIME,DSMSIDEBCHANGETIME = B.DSMSIDEBCHANGETIME,RTECHANGETIME = B.RTECHANGETIME,CONDITIONALACCESSSTATUS = B.CONDITIONALACCESSSTATUS,DUALAUTHENTICATION = B.DUALAUTHENTICATION,REJECTLIMITREACHEDSTATUS = B.REJECTLIMITREACHEDSTATUS,ISEXPIRINGCLEARANCESUPPORTED = B.ISEXPIRINGCLEARANCESUPPORTED,DESCRIPTION = B.DESCRIPTION,CLASSTYPE = B.CLASSTYPE,PROTECTED = B.PROTECTED,PARTITIONID = B.PARTITIONID,INREADERID = B.INREADERID,OUTREADERID = B.OUTREADERID,BOARDID = B.BOARDID,BOARDCLASSTYPE = B.BOARDCLASSTYPE,DOORSWITCHID = B.DOORSWITCHID,DOORLOCKID = B.DOORLOCKID,RTEID = B.RTEID,CONTROLLERID = B.CONTROLLERID,SECONDARYRELAYID = B.SECONDARYRELAYID,CONTROLLERCLASSTYPE = B.CONTROLLERCLASSTYPE,SHUNTEXPIRATIONRELAYID = B.SHUNTEXPIRATIONRELAYID,TEMPLATE = B.TEMPLATE,SENDTOMONITORSTATION = B.SENDTOMONITORSTATION,MAINTENANCEMODE = B.MAINTENANCEMODE,SENDTOJOURNAL = B.SENDTOJOURNAL,DOORFORCEDALARMSENABLE = B.DOORFORCEDALARMSENABLE,DOORHELDALARMSENABLE = B.DOORHELDALARMSENABLE,RTEENABLE = B.RTEENABLE,LOCKTAMPERALARMSENABLE = B.LOCKTAMPERALARMSENABLE,DOOROPENTAMPERALARMSENABLE = B.DOOROPENTAMPERALARMSENABLE,DSMTAMPERALARMSENABLE = B.DSMTAMPERALARMSENABLE,REPORTNONALARMS = B.REPORTNONALARMS,CONDITIONALACCESSSCHEDULEID = B.CONDITIONALACCESSSCHEDULEID,CONDITIONALACCESSREQUESTEVENTID = B.CONDITIONALACCESSREQUESTEVENTID,SECONDARYINREADERID = B.SECONDARYINREADERID,SECONDARYOUTREADERID = B.SECONDARYOUTREADERID,DOUBLESWIPEPERSONNELGROUP2ID = B.DOUBLESWIPEPERSONNELGROUP2ID,ENTRYAREAID = B.ENTRYAREAID,EXITAREAID = B.EXITAREAID,LOCKUNSECUREDALARMSENABLE = B.LOCKUNSECUREDALARMSENABLE,NAME = B.NAME,INTERFACEUUID=(select @interfaceuuid)
,MODIFIEDON=GETUTCDATE(),MODIFIEDBY=(SELECT TOP 1 VFUUID FROM APPLICATIONS(NOLOCK) WHERE NAME ='ML_ACCESSUSAGE_SYNC_MODULE')
 FROM DOORS(NOLOCK) A ,STG_CCURE_DOORS(NOLOCK) B WHERE A.PACSUUID=B.GUID


 INSERT INTO DOORS (VFUUID,PACSUUID,DOORID ,SLOTINDEX,ISALARMED,UNLOCKDOORONRTE,SHUNTDSMONRTE,SHUNTCANCELDISABLE,RELOCKEXPIRATION,RELOCKAFTEROPEN,DELAYRELOCKTIME,UNLOCKTIME,SHUNTTIME,INDIRECTIONALLINKTIME,OUTDIRECTIONALLINKTIME,ALTERNATESHUNTTIME,SHUNTEXPRELAYTIME,UNLOCKGRACETIME,OPENGRACETIME,CLOSEDEBOUNCETIME,ALARMSTATESTATUS,MOMENTARYUNLOCKSTATUS,ADMITSTATUS,ALWAYSUSESHUNTEXPIRE,ENTRANCEREADERSTATUS,EXITREADERSTATUS,REXSTATUS,DOUBLESWIPEPERMISSION,DOUBLESWIPEPRIORITY,INBOUNDINPUT,INBOUNDDURATION,OUTBOUNDINPUT,OUTBOUNDDURATION,INASSETREADER,OUTASSETREADER,ALTERNATEUNLOCKTIME,DOORINTRUSIONZONESTATUS,READERDISPLAYNAME,CLEARANCEFILTERSTATUS,DOOROPENALARMSTATUS,LOCKUNSECUREDSTATUS,LOCKTAMPERSTATUS,DSMTAMPERSTATUS,CRASHBARCHANGETIME,BONDSENSORCHANGETIME,LATCHBOLTCHANGETIME,CAMSENSORCHANGETIME,DSMSIDEACHANGETIME,DSMSIDEBCHANGETIME,RTECHANGETIME,CONDITIONALACCESSSTATUS,DUALAUTHENTICATION,REJECTLIMITREACHEDSTATUS,ISEXPIRINGCLEARANCESUPPORTED,DESCRIPTION,CLASSTYPE,PROTECTED,PARTITIONID,INREADERID,OUTREADERID,BOARDID,BOARDCLASSTYPE,DOORSWITCHID,DOORLOCKID,RTEID,CONTROLLERID,SECONDARYRELAYID,CONTROLLERCLASSTYPE,SHUNTEXPIRATIONRELAYID,TEMPLATE,SENDTOMONITORSTATION,MAINTENANCEMODE,SENDTOJOURNAL,DOORFORCEDALARMSENABLE,DOORHELDALARMSENABLE,RTEENABLE,LOCKTAMPERALARMSENABLE,DOOROPENTAMPERALARMSENABLE,DSMTAMPERALARMSENABLE,REPORTNONALARMS,CONDITIONALACCESSSCHEDULEID,CONDITIONALACCESSREQUESTEVENTID,SECONDARYINREADERID,SECONDARYOUTREADERID,DOUBLESWIPEPERSONNELGROUP2ID,ENTRYAREAID,EXITAREAID,LOCKUNSECUREDALARMSENABLE,NAME,INTERFACEUUID,CREATEDON,CREATEDBY)
 SELECT NEWID(),GUID,OBJECTID,SLOTINDEX,ISALARMED,UNLOCKDOORONRTE,SHUNTDSMONRTE,SHUNTCANCELDISABLE,RELOCKEXPIRATION,RELOCKAFTEROPEN,DELAYRELOCKTIME,UNLOCKTIME,SHUNTTIME,INDIRECTIONALLINKTIME,OUTDIRECTIONALLINKTIME,ALTERNATESHUNTTIME,SHUNTEXPRELAYTIME,UNLOCKGRACETIME,OPENGRACETIME,CLOSEDEBOUNCETIME,ALARMSTATESTATUS,MOMENTARYUNLOCKSTATUS,ADMITSTATUS,ALWAYSUSESHUNTEXPIRE,ENTRANCEREADERSTATUS,EXITREADERSTATUS,REXSTATUS,DOUBLESWIPEPERMISSION,DOUBLESWIPEPRIORITY,INBOUNDINPUT,INBOUNDDURATION,OUTBOUNDINPUT,OUTBOUNDDURATION,INASSETREADER,OUTASSETREADER,ALTERNATEUNLOCKTIME,DOORINTRUSIONZONESTATUS,READERDISPLAYNAME,CLEARANCEFILTERSTATUS,DOOROPENALARMSTATUS,LOCKUNSECUREDSTATUS,LOCKTAMPERSTATUS,DSMTAMPERSTATUS,CRASHBARCHANGETIME,BONDSENSORCHANGETIME,LATCHBOLTCHANGETIME,CAMSENSORCHANGETIME,DSMSIDEACHANGETIME,DSMSIDEBCHANGETIME,RTECHANGETIME,CONDITIONALACCESSSTATUS,DUALAUTHENTICATION,REJECTLIMITREACHEDSTATUS,ISEXPIRINGCLEARANCESUPPORTED,DESCRIPTION,CLASSTYPE,PROTECTED,PARTITIONID,INREADERID,OUTREADERID,BOARDID,BOARDCLASSTYPE,DOORSWITCHID,DOORLOCKID,RTEID,CONTROLLERID,SECONDARYRELAYID,CONTROLLERCLASSTYPE,SHUNTEXPIRATIONRELAYID,TEMPLATE,SENDTOMONITORSTATION,MAINTENANCEMODE,SENDTOJOURNAL,DOORFORCEDALARMSENABLE,DOORHELDALARMSENABLE,RTEENABLE,LOCKTAMPERALARMSENABLE,DOOROPENTAMPERALARMSENABLE,DSMTAMPERALARMSENABLE,REPORTNONALARMS,CONDITIONALACCESSSCHEDULEID,CONDITIONALACCESSREQUESTEVENTID,SECONDARYINREADERID,SECONDARYOUTREADERID,DOUBLESWIPEPERSONNELGROUP2ID,ENTRYAREAID,EXITAREAID,LOCKUNSECUREDALARMSENABLE,NAME,(select @interfaceuuid),GETUTCDATE(),(SELECT TOP 1 VFUUID FROM APPLICATIONS
 WHERE NAME ='ML_ACCESSUSAGE_SYNC_MODULE') FROM 
 STG_CCURE_DOORS(NOLOCK) WHERE GUID NOT IN (SELECT DISTINCT PACSUUID FROM DOORS(NOLOCK))
 
END   
GO


IF OBJECT_ID ('dbo.ACCESSUSAGE') IS NOT NULL
   AND ((Select TOP 1  Type From Sys.Objects Where 1=1 and [Name]='ACCESSUSAGE')='T')
	DROP TABLE dbo.ACCESSUSAGE
ELSE IF OBJECT_ID ('dbo.ACCESSUSAGE') IS NOT NULL
   AND ((Select TOP 1  Type From Sys.Objects Where 1=1 and [Name]='ACCESSUSAGE')='V')
   DROP VIEW  dbo.ACCESSUSAGE
ELSE IF OBJECT_ID ('dbo.ACCESSUSAGE') IS NOT NULL
   AND ((Select TOP 1  Type From Sys.Objects Where 1=1 and [Name]='ACCESSUSAGE')='U')
   DROP TABLE  dbo.ACCESSUSAGE

GO

CREATE VIEW ACCESSUSAGE AS
SELECT * FROM IDENTITY_AREAS_USAGE
GO





IF OBJECT_ID ('dbo.TEMP_VFACCESSLOG') IS NOT NULL
	DROP TABLE dbo.TEMP_VFACCESSLOG
GO

CREATE TABLE TEMP_VFACCESSLOG (
	[index] bigint NULL,
	EXT_ID varchar(MAX)  NULL,
	[TIMESTAMP] datetime NULL,
	Person_UID varchar(MAX)  NULL,
	PACSACCESSID varchar(MAX)  NULL,
	sitecodeid varchar(MAX)  NULL,
	CARDNUMBER varchar(MAX)  NULL,
	systemid bigint NULL,
	VFCREATIONDT datetime NULL,
	Direction varchar(MAX)  NULL,
	STATUS varchar(MAX) NULL,
	TIMESTAMP_UTC datetime NULL,
	NAME varchar(MAX)   NULL,
	PACSUUID varchar(MAX)  NULL,
	SERVERNAME varchar(MAX) NULL,
	SERVERID varchar(MAX)  NULL,
	SecondaryObjectIdentity varchar(MAX) NULL,
	INTERFACEUUID varchar(MAX)  NULL
)
GO

IF OBJECT_ID ('dbo.VFACCESSLOG') IS NOT NULL
	DROP TABLE dbo.VFACCESSLOG
GO

CREATE TABLE VFACCESSLOG (
	VFID numeric(10,0) IDENTITY(1,1) NOT NULL,
	EXT_ID nvarchar(255)  NULL,
	[TIMESTAMP] datetime NULL,
	Person_UID nvarchar(255)  NULL,
	PACSACCESSID nvarchar(255)  NULL,
	DOOR_EXT nvarchar(255)  NULL,
	SiteCodeID nvarchar(255)  NULL,
	CARDNUMBER nvarchar(255)  NULL,
	Systemid nvarchar(255)  NULL,
	VFCREATIONDT datetime NULL,
	Direction nvarchar(200)  NULL,
	STATUS nvarchar(200)  NULL,
	TIMESTAMP_UTC datetime NULL,
	NAME nvarchar(100)  NULL,
	PACSUUID nvarchar(255) NULL,
	SERVERNAME nvarchar(50)  NULL,
	SERVERID nvarchar(50)  NULL,
	ALARMPOINT_GUID nvarchar(255) NULL,
	INTERFACEUUID nvarchar(255) NULL,
	IDENTITYUUID nvarchar(255) NULL
)
GO

IF OBJECT_ID ('dbo.PROC_ML_PIAM_VFACCESSLOG_INCREMENTAL_SYNC') IS NOT NULL
		DROP PROCEDURE dbo.PROC_ML_PIAM_VFACCESSLOG_INCREMENTAL_SYNC
GO

CREATE  PROCEDURE  dbo.PROC_ML_PIAM_VFACCESSLOG_INCREMENTAL_SYNC @interfaceuuid as nvarchar(200)  
as   
BEGIN   
  


	--declare @interfaceuuid  as nvarchar(200) = '794BC461-A4EE-4D77-BD0C-ADDD4AFEA7A6'

	DECLARE @map_column_identities nvarchar(200)=(SELECT TOP 1 ENTITYFIELDNAME FROM INTERFACEENTITYFIELDS(NOLOCK) WHERE VFINTERFACEENTITYUUID IN 
	(SELECT TOP 1  VFUUID FROM  INTERFACEENTITIES(NOLOCK) WHERE VFINTERFACEUUID =(select @interfaceuuid)
	AND ENTITYNAME = 'Identities')  AND ISIDENTIFIER = 1)

	print @map_column_identities
 
  
	DECLARE @query_insert_to_vfaccesslog nvarchar(max) ='INSERT INTO VFACCESSLOG(EXT_ID,TIMESTAMP,PERSON_UID,PACSACCESSID
	,SITECODEID,CARDNUMBER,SYSTEMID,VFCREATIONDT,DIRECTION,
	STATUS,TIMESTAMP_UTC,NAME,PACSUUID,SERVERNAME,SERVERID,
	ALARMPOINT_GUID,INTERFACEUUID,IDENTITYUUID)
	SELECT A.EXT_ID,A.TIMESTAMP,A.PERSON_UID,A.PACSACCESSID,A.SITECODEID,A.CARDNUMBER,A.SYSTEMID,GETUTCDATE(),A.DIRECTION,A.STATUS,A.TIMESTAMP_UTC,A.NAME,
	A.PACSUUID,A.SERVERNAME,A.SERVERID,A.SECONDARYOBJECTIDENTITY,A.INTERFACEUUID,I.VFUUID FROM TEMP_VFACCESSLOG(NOLOCK) A
	JOIN IDENTITIES(NOLOCK) I ON A.PERSON_UID = I.'+@map_column_identities+' WHERE NOT EXISTS  (SELECT 1 FROM VFACCESSLOG(NOLOCK) B WHERE A.EXT_ID = B.EXT_ID )' ;  
	

	print(@query_insert_to_vfaccesslog)
	execute sp_executesql @query_insert_to_vfaccesslog
 

 
END   
GO




IF OBJECT_ID ('dbo.VFDEVICETYPECODES') IS NOT NULL
	DROP TABLE dbo.VFDEVICETYPECODES
GO

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE "VFDEVICETYPECODES" 
   (	"DEVICETYPE" NVARCHAR(200), 
	"DEVICETYPEENCODE" DECIMAL(38,0) 
   ) 
GO


INSERT INTO VFDEVICETYPECODES (DEVICETYPE,DEVICETYPEENCODE)
VALUES('Controller' ,1)
GO
    
INSERT INTO VFDEVICETYPECODES (DEVICETYPE,DEVICETYPEENCODE)
VALUES('Door', 2)
GO
    
INSERT INTO VFDEVICETYPECODES (DEVICETYPE,DEVICETYPEENCODE)
VALUES('Elevator',	3) 
GO

INSERT INTO VFDEVICETYPECODES (DEVICETYPE,DEVICETYPEENCODE)
VALUES('Input',4)
GO

INSERT INTO VFDEVICETYPECODES (DEVICETYPE,DEVICETYPEENCODE)
VALUES('Reader',5) 
GO




IF OBJECT_ID ('dbo.Vf_device_location') IS NOT NULL
	DROP TABLE dbo.Vf_device_location
GO

CREATE TABLE Vf_device_location(
	[ALARMPOINTUUID] [nvarchar](100) NULL,
	[CONTROLLERNAME] [nvarchar](100) NULL,
	[PARTITIONID] [int] NULL,
	[PARTITIONNAME] [nvarchar](100) NULL,
	[CITY] [nvarchar](100) NULL,
	[VFUUID] [uniqueidentifier] NULL,
	[CITYCODE] [numeric](18, 0) NULL,
	[DEVICETYPE] [varchar](6) NULL,
	[DEVICETYPEENCODE] [numeric](18, 0) NULL,
	[CONTROLLERID] [numeric](18, 0) NULL,
	[BIAS] [int] NULL,
	[CREATEDBY] [nvarchar](255) NULL,
	[CREATEDON] [datetimeoffset](7) NULL,
	[MODIFIEDBY] [nvarchar](255) NULL,
	[MODIFIEDON] [datetimeoffset](7) NULL,
	[OPERATIONNOTES] [nvarchar](max) NULL,
	[FIRSTSEENDATE] [datetimeoffset](7) NULL,
	[ALARMPOINT_GUID] [uniqueidentifier] NULL,
	[TOTAL_OPTIMIZED_DEVICES] [int] NULL,
	[IS_OPTIMIZED] [tinyint] NULL,
	[OPTIMIZEDDATE] [datetime] NULL,
	[MOV_AVG_PRE_OPT] [int] NULL,
	[SENDTOMONITORSTATION] [bit] NULL,
	[OBJECTID] [bigint] NULL,
	[STANDARDTIMEZONE] [nvarchar](100) NULL,
	[LASTOPTIMIZEDDATE] [datetime] NULL,
	[REVISEDOPTIMIZEDDATE] [datetime] NULL,
	[REDUCTIONPERCENTAGE] [decimal](10, 2) NULL,
	[LOCATIONCODE] [nvarchar](100) NULL,
	[MAINTENANCEMODE] [numeric](38, 0) NULL,
	[INTERFACEUUID] [nvarchar](300) NULL,
	[LOCATIONUID] [NVARCHAR](200) NULL 
) 
GO

IF OBJECT_ID ('dbo.Vftemp_device_location') IS NOT NULL
	DROP TABLE dbo.Vftemp_device_location
GO
      
CREATE TABLE Vftemp_device_location(
	[ALARMPOINTUUID] [nvarchar](100) NULL,
	[CONTROLLERNAME] [nvarchar](100) NULL,
	[PARTITIONID] [int] NULL,
	[PARTITIONNAME] [nvarchar](100) NULL,
	[CITY] [nvarchar](100) NULL,
	[VFUUID] [uniqueidentifier] NULL,
	[CITYCODE] [numeric](18, 0) NULL,
	[DEVICETYPE] [varchar](6) NULL,
	[DEVICETYPEENCODE] [numeric](18, 0) NULL,
	[CONTROLLERID] [numeric](18, 0) NULL,
	[BIAS] [int] NULL,
	[CREATEDBY] [nvarchar](255) NULL,
	[CREATEDON] [datetimeoffset](7) NULL,
	[MODIFIEDBY] [nvarchar](255) NULL,
	[MODIFIEDON] [datetimeoffset](7) NULL,
	[OPERATIONNOTES] [nvarchar](max) NULL,
	[FIRSTSEENDATE] [datetimeoffset](7) NULL,
	[ALARMPOINT_GUID] [uniqueidentifier] NULL,
	[TOTAL_OPTIMIZED_DEVICES] [int] NULL,
	[IS_OPTIMIZED] [tinyint] NULL,
	[OPTIMIZEDDATE] [datetime] NULL,
	[MOV_AVG_PRE_OPT] [int] NULL,
	[SENDTOMONITORSTATION] [bit] NULL,
	[OBJECTID] [bigint] NULL,
	[STANDARDTIMEZONE] [nvarchar](100) NULL,
	[LASTOPTIMIZEDDATE] [datetime] NULL,
	[REVISEDOPTIMIZEDDATE] [datetime] NULL,
	[REDUCTIONPERCENTAGE] [decimal](10, 2) NULL,
	[LOCATIONCODE] [nvarchar](100) NULL,
	[MAINTENANCEMODE] [numeric](38, 0) NULL,
	[INTERFACEUUID] [nvarchar](300) NULL,
	[LOCATIONUID] [NVARCHAR](200) NULL
) 
GO

IF OBJECT_ID ('dbo.PROC_ML_PIAM_CCURE_VFDEVICELOCATION_SYNC') IS NOT NULL
	DROP PROCEDURE dbo.PROC_ML_PIAM_CCURE_VFDEVICELOCATION_SYNC
GO
CREATE PROCEDURE PROC_ML_PIAM_CCURE_VFDEVICELOCATION_SYNC @interfaceuuid as nvarchar(200)  
AS
BEGIN     
    
    --DECLARE @interfaceuuid as  nvarchar(200)  = '794BC461-A4EE-4D77-BD0C-ADDD4AFEA7A6'

	IF OBJECT_ID ('dbo.Vftemp_device_location') IS NOT NULL
		DROP TABLE dbo.Vftemp_device_location
  
   
       SELECT  fd.ALARMPOINTUUID, FD.ALARMPOINT_GUID,fd.CONTROLLERNAME,
       DENSE_RANK() over (ORDER BY PARTITIONNAME) PARTITIONID, fd.PARTITIONNAME, fd.CITY, fd.LOCATIONCODE  ,NEWID() VFUUID, fd.BIAS,  
       DENSE_RANK() over (ORDER BY CITY,PARTITIONNAME) CITYCODE, fd.DEVICETYPE ,fd.CONTROLLERID,GETUTCDATE()  as FIRSTSEENDATE,
       DENSE_RANK() over (ORDER BY fd.DEVICETYPE) DEVICETYPEENCODE, fd.SENDTOMONITORSTATION ,fd.OBJECTID ,fd.STANDARDTIMEZONE , fd.MAINTENANCEMODE 
       INTO Vftemp_device_location
	   FROM  
       (select d.NAME ALARMPOINTUUID,D.GUID AS ALARMPOINT_GUID, lj.STATE  PARTITIONNAME, d.CONTROLLERID, NULL CONTROLLERNAME, d.DEVICETYPE  DEVICETYPE,t.BIAS BIAS,  
        lj.NAME CITY, d.LOCATIONCODE , d.SENDTOMONITORSTATION ,d.OBJECTID ,t.STANDARDNAME  as STANDARDTIMEZONE , d.MAINTENANCEMODE   
        from (
        select distinct D.NAME ,D.GUID,D.PARTITIONID, D.CONTROLLERID ,D.TIMEZONEID , 'Door' as DEVICETYPE,
        l.ACID LOCATIONCODE ,
        D.SENDTOMONITORSTATION ,D.OBJECTID ,D.MAINTENANCEMODE 
        from ACCESS_DOOR(NOLOCK) D
        JOIN VFACCESSAREAS_DOOR(NOLOCK) vd ON D.GUID = vd.ALARMPOINT_GUID 
        JOIN LOCATIONACCESSLEVELS(NOLOCK) la ON vd.ACCESSAREAUUID =la.ACCESSAREAUUID 
        JOIN LOCATIONS(NOLOCK) l ON la.LOCATIONUUID=l.VFUUID
        where D.CONTROLLERID  <> 0
        )d
        LEFT JOIN
        (SELECT * FROM DBO_PARTITION )p  
        on d.PARTITIONID  =  p.OBJECTID  
        LEFT JOIN 
        (SELECT OBJECTID , BIAS,STANDARDNAME  FROM DBO_TIMEZONE(NOLOCK))t 
        ON d.TIMEZONEID  = t.OBJECTID 
        left join LOCATIONS(NOLOCK)  lj  
        on  d.LOCATIONCODE  = lj.ACID 
        ) fd  
        where fd.ALARMPOINT_GUID is not null


	 UPDATE  VFTEMP_DEVICE_LOCATION 
        SET LOCATIONUID=SRC.LOCATIONUID,LOCATIONCODE=SRC.LOCATIONCODE,
        CITY = SRC.CITY, PARTITIONNAME = SRC.STATE 
		FROM VFTEMP_DEVICE_LOCATION TGT 
		JOIN  (select vd.ALARMPOINT_GUID, l.VFID LOCATIONUID,l.LOCATIONCODE,L.CITY, L.STATE from 
        VFACCESSAREAS_DOOR(NOLOCK) vd 
        JOIN LOCATIONACCESSLEVELS(NOLOCK) la ON vd.ACCESSAREAUUID =la.ACCESSAREAUUID 
        JOIN LOCATIONS(NOLOCK) l ON la.LOCATIONUUID=l.VFUUID) SRC 
		ON TGT.ALARMPOINT_GUID= SRC.ALARMPOINT_GUID
        WHERE TGT.LOCATIONUID IS NULL

	UPDATE VFTEMP_DEVICE_LOCATION  
	SET DEVICETYPEENCODE = A.DEVICETYPEENCODE
	FROM VFTEMP_DEVICE_LOCATION TGT 
	JOIN (select DISTINCT DEVICETYPE, DEVICETYPEENCODE  FROM  VFDEVICETYPECODES(NOLOCK) ) A
	ON TGT.DEVICETYPE = A.DEVICETYPE
    
   
    DECLARE @vUpdate_query nvarchar(max) ='UPDATE Vf_device_location 
    set PARTITIONID = src.PARTITIONID, ALARMPOINTUUID = src.ALARMPOINTUUID, CONTROLLERNAME = src.CONTROLLERNAME,    
    PARTITIONNAME = src.PARTITIONNAME, CITY = src.CITY, citycode = src.citycode, devicetype = src.devicetype,    
    CONTROLLERID = src.CONTROLLERID, DEVICETYPEENCODE = src.DEVICETYPEENCODE,    
    locationcode = src.locationcode, BIAS = src.BIAS , SendToMonitorStation = src.SendToMonitorStation, ObjectID = src.ObjectID  
   ,StandardTimeZone = src.StandardTimeZone,INTERFACEUUID= '''+@interfaceuuid+''', MAINTENANCEMODE = SRC.MAINTENANCEMODE ,LOCATIONUID=SRC.LOCATIONUID
    FROM Vf_device_location(NOLOCK) vdl , Vftemp_device_location(NOLOCK) src WHERE vdl.ALARMPOINT_GUID =src.ALARMPOINT_GUID'
   
   
    DECLARE @vInsert_query  nvarchar(max) ='insert into Vf_device_location (ALARMPOINTUUID,ALARMPOINT_GUID,CONTROLLERNAME,PARTITIONID,PARTITIONNAME,CITY,VFUUID,CITYCODE,DEVICETYPE,CONTROLLERID,FIRSTSEENDATE,DEVICETYPEENCODE,LOCATIONCODE ,BIAS,SENDTOMONITORSTATION ,OBJECTID 
    ,STANDARDTIMEZONE ,MAINTENANCEMODE,INTERFACEUUID,LOCATIONUID)     
    SELECT fd.ALARMPOINTUUID,fd.ALARMPOINT_GUID,fd.CONTROLLERNAME,fd.PARTITIONID,fd.PARTITIONNAME,fd.CITY, NEWID(),fd.CITYCODE , FD.DEVICETYPE ,fd.CONTROLLERID,fd.FIRSTSEENDATE,fd.DEVICETYPEENCODE,fd.LOCATIONCODE ,fd.BIAS,
    fd.SENDTOMONITORSTATION ,fd.OBJECTID ,fd.STANDARDTIMEZONE ,FD.MAINTENANCEMODE , '''+@interfaceuuid+''',fd.LOCATIONUID from Vftemp_device_location fd     
    left join Vf_device_location(NOLOCK) tgt    
    on fd.ALARMPOINT_GUID = tgt.ALARMPOINT_GUID    
    where tgt.ALARMPOINT_GUID is NULL' 
    
    print(@interfaceuuid)
    

	print(@vUpdate_query)
    execute sp_executesql @vUpdate_query
   
    
    print(@vInsert_query)
	execute sp_executesql @vInsert_query


 
END 
GO

 





